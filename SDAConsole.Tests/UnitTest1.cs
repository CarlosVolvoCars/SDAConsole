using Moq;
using DAL.Shared.Models;
using Microsoft.Extensions.Logging;
using SDAConsole.types;
using System.Text.Json;

[TestFixture]
public class ExtractVinFromResponseTest()
{
    private Mock<ILogger> _mockLogger;

    private Mock<InstallationReport> _mockInstallationReport;

    private Mock<DalConfiguration> _mockDalConfig;

    [SetUp]
    public void Setup()
    {
        _mockLogger = new Mock<ILogger>();
        _mockInstallationReport = new Mock<InstallationReport>();
        _mockDalConfig = new Mock<DalConfiguration>();
    }

    [Test]
    public void ExtractVin_ShouldReturnCorrectVin()
    {
        // Instatiate the InstallationReportParser (Class from SDAConsole Program.cs)
        var parser = new InstallationReportParser(_mockInstallationReport.Object, _mockDalConfig.Object, _mockLogger.Object);

        // Arrange
        var jsonResponse
        var expectedVin = "YV4TEEEB1TM999051";

        // Act
        var result = parser.ExtractVinFromResponse(jsonResponse);

        // Assert
        Assert.That(result, Is.EqualTo(expectedVin));

    }
}

[TestFixture]
public class ExtractFyonFromResponseTest()
{
    private Mock<ILogger> _mockLogger;

    private Mock<InstallationReport> _mockInstallationReport;

    private Mock<DalConfiguration> _mockDalConfig;

    [SetUp]
    public void Setup()
    {
        _mockLogger = new Mock<ILogger>();
        _mockInstallationReport = new Mock<InstallationReport>();
        _mockDalConfig = new Mock<DalConfiguration>();
    }

    [Test]

    public void ExtractFyon_ShouldReturnCorrectFyon()
    {
        // Instatiate the InstallationReportParser (Class from SDAConsole Program.cs)
        var parser = new InstallationReportParser(_mockInstallationReport.Object, _mockDalConfig.Object, _mockLogger.Object);

        // Arrange
        var jsonResponse
        var expectedFyon = "861285088";

        // Act
        var result = parser.ExtractFYONFromResponse(jsonResponse);
        // Assert
        Assert.That(result, Is.EqualTo(expectedFyon));
    }
}

[TestFixture]
public class ExtractChassisFromResponseTest()
{
    private Mock<ILogger> _mockLogger;

    private Mock<InstallationReport> _mockInstallationReport;

    private Mock<DalConfiguration> _mockDalConfig;

    [SetUp]
    public void Setup()
    {
        _mockLogger = new Mock<ILogger>();
        _mockInstallationReport = new Mock<InstallationReport>();
        _mockDalConfig = new Mock<DalConfiguration>();
    }

    [Test]
    public void ExtractChassis_ShouldReturnCorrectChassis()
    {
        // Instatiate the InstallationReportParser (Class from SDAConsole Program.cs)
        var parser = new InstallationReportParser(_mockInstallationReport.Object, _mockDalConfig.Object, _mockLogger.Object);

        // Arrange
        var jsonResponse
        var expectedChassis = "999051";

        // Act
        var result = parser.ExtractChassisFromResponse(jsonResponse);
        // Assert
        Assert.That(result, Is.EqualTo(expectedChassis));
    }
}

[TestFixture]
public class ExtractFactoryCodeFromResponseTest()
{
    private Mock<ILogger> _mockLogger;

    private Mock<InstallationReport> _mockInstallationReport;

    private Mock<DalConfiguration> _mockDalConfig;

    [SetUp]
    public void Setup()
    {
        _mockLogger = new Mock<ILogger>();
        _mockInstallationReport = new Mock<InstallationReport>();
        _mockDalConfig = new Mock<DalConfiguration>();
    }

    [Test]
    public void ExtractFactoryCode_ShouldReturnCorrectFactoryCode()
    {
        // Instatiate the InstallationReportParser (Class from SDAConsole Program.cs)
        var parser = new InstallationReportParser(_mockInstallationReport.Object, _mockDalConfig.Object, _mockLogger.Object);

        // Arrange
        var jsonResponse
        var expectedFactoryCode = "99";

        // Act
        var result = parser.ExtractFactoryCodeFromResponse(jsonResponse);
        // Assert
        Assert.That(result, Is.EqualTo(expectedFactoryCode));
    }
}

[TestFixture]
public class ExtractStructureWeekFromResponseTest()
{
    private Mock<ILogger> _mockLogger;

    private Mock<InstallationReport> _mockInstallationReport;

    private Mock<DalConfiguration> _mockDalConfig;

    [SetUp]
    public void Setup()
    {
        _mockLogger = new Mock<ILogger>();
        _mockInstallationReport = new Mock<InstallationReport>();
        _mockDalConfig = new Mock<DalConfiguration>();
    }

    [Test]
    public void ExtractStructureWeek_ShouldReturnCorrectStructureWeek()
    {
        // Instatiate the InstallationReportParser (Class from SDAConsole Program.cs)
        var parser = new InstallationReportParser(_mockInstallationReport.Object, _mockDalConfig.Object, _mockLogger.Object);

        // Arrange
        var jsonResponse
        var expectedStructureWeek = 202521;
        // Act
        var result = parser.ExtractStructureWeekFromResponse(jsonResponse);
        // Assert
        Assert.That(result, Is.EqualTo(expectedStructureWeek));
    }
}

[TestFixture]
public class ExtractCoMoExpresionsFromResponseTest
{
    private Mock<ILogger> _mockLogger;

    private Mock<InstallationReport> _mockInstallationReport;

    private Mock<DalConfiguration> _mockDalConfig;

    private ILogger _logger;

    [SetUp]
    public void Setup()
    {

        using ILoggerFactory factory = LoggerFactory.Create(builder => builder.AddConsole());
        _logger = factory.CreateLogger("Unit Testing");

        _mockLogger = new Mock<ILogger>();
        _mockInstallationReport = new Mock<InstallationReport>();
        _mockDalConfig = new Mock<DalConfiguration>();
    }

    [Test]
    public void ExtractCoMoExpresions_ShouldReturnCorrectCoMoExpresions()
    {
        // Instatiate the InstallationReportParser (Class from SDAConsole Program.cs)
        var parser = new InstallationReportParser(_mockInstallationReport.Object, _mockDalConfig.Object, _mockLogger.Object);

        // Arrange
        var jsonResponse
        var expectedCoMo = "CoMo";

        // Act
        var result = parser.ExtractCoMoExpresionsFromResponse(jsonResponse);
        // Assert
        _logger.LogInformation("CoMo Expresions: {0}", JsonSerializer.Serialize(result, new JsonSerializerOptions { WriteIndented = true}));

        Assert.That(result[0], Is.EqualTo(expectedCoMo));
        Assert.That(result[1], Is.EqualTo(expectedCoMo));

    }
}
